///////////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2022, STEREOLABS.
//
// All rights reserved.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
///////////////////////////////////////////////////////////////////////////

// ZED include
#include "SenderRunner.hpp"
#include "FusionRunner.hpp"
#include "GLViewer.hpp"
#include "SK_Serializer.hpp"

#include "global.hpp"

// Main loop
int main(int argc, char **argv) {
   
	if (argc != 2) {
		// this file should be generated by using the tool ZED360
		std::cout << "Need a Configuration file in input" << std::endl;		
		return 1;
	}

    std::cout << "ZED Bodies exporter" << std::endl;		
    std::cout << "Press Q to stop and save the data." << std::endl;		

	std::string json_config(argv[1]);
    auto configurations = sl::readFusionConfigurationFile(json_config, COORD_SYS, UNIT_SYS);

    if (configurations.empty()) {
        std::cout << "Empty configuration File." << std::endl;
        return 1;
    }

    std::vector<SenderRunner> senders(configurations.size());
    int id_sender = 0;
    for (auto conf: configurations) {
        if(conf.communication_parameters.getType() == sl::CommunicationParameters::COMM_TYPE::INTRA_PROCESS){
            std::cout << "Try to open ZED " <<conf.serial_number << ".." << std::endl;
            auto state = senders[id_sender++].open(conf);
            if (state)
                std::cout << "ZED " << conf.serial_number << " is ready " << std::endl;
            else
                std::cout << "Fail to open ZED " <<  conf.serial_number << std::endl;
        }
    }

    // start sender at the same time (better suited when playing back svos)
    for (auto &it: senders)
        it.start();

    FusionRunner fusion;
    if(! fusion.start(configurations)){
        std::cout << "No Camera connected.\n\tQUIT." << std::endl;
        fusion.stop();
        return EXIT_FAILURE;
    }

    GLViewer viewer;
    viewer.init(argc, argv);

    bool run = true;

    nlohmann::json skeletons_file;
    auto ptr_data = SharedData::getInstance();
    while (run) {
        
        if (ptr_data->bodiesData.mtx.try_lock()) {
            viewer.updateBodies(ptr_data->bodiesData.bodies, ptr_data->bodiesData.singledata, ptr_data->metrics);
            skeletons_file[std::to_string(ptr_data->bodiesData.bodies.timestamp.getMilliseconds())] = sk::serialize(ptr_data->bodiesData.bodies);
            ptr_data->bodiesData.mtx.unlock();
        }
                
        run = viewer.isAvailable();
        auto key = viewer.getKey();
        sl::sleep_ms(20);
    }

    if (skeletons_file.size()) {
        std::ofstream file_sk("bodies.json");
        file_sk << std::setw(4) << skeletons_file << std::endl;
        file_sk.close();
        std::cout << "Successfully saved the boy data to bodies.json" << std::endl;
    }

    else
        std::cout << "No body data to save." << std::endl;
        
    viewer.exit();

    for (auto &it: senders)
        it.stop();

    fusion.stop();

    return EXIT_SUCCESS;
}
